  public static long ConvertDateTimeToTicks( DateTime dtInput) 
  {
      long ticks = 0; 
      ticks=dtInput.Ticks; 
      return ticks; 
  } 

  public static DateTime ConvertTicksToDateTime( long lticks) 
  { 
     DateTime dtresult = new DateTime(lticks); 
     return dtresult; 
  }

  
  --------------------원격으로 서버 연결---------------------------------------------
 
 
 
1. 시작 -> 실행 cmd 창에서 아래를 입력
   net use \\[IP] /user:[domain]\[어드민계정] [암호]
 
 
 
-------------------------세션 끊기-------------------------------------------------
 

2. query user /server:[IP]
 

 세션 이름         사용자 이름              ID  상태    종류        장치
 console                                     0  Conn    wdcon
 rdp-tcp                                 65536  수신 대기  rdpwd
 rdp-tcp#159       admin         2  활성    rdpwd
                   admin         1  디스크  rdpwd
 
-> 활성 되어있는 세션을 끊으면 됨
 

3. tsdiscon 1 /server:[IP] -> 1번 세션 끊김
 
   tsdiscon 2 /server:[IP] -> 2번 세션 끊김
 
 
 
-------------------------로그오프-------------------------------------------------
 

2. query user /server:[IP]
 

 세션 이름         사용자 이름              ID  상태    종류        장치
 console                                     0  Conn    wdcon
 rdp-tcp                                 65536  수신 대기  rdpwd
 rdp-tcp#159       admin         2  활성    rdpwd
                   admin         1  디스크  rdpwd
 
-> 활성 되어있는 세션을 끊으면 됨
 

3. logoff 1 /server:[IP] -> 1번에서 로그오프
 
 
 
-------------------------리부트----------------------------------------------------
 
 
 
2. tsshutdn 60 /server:[IP] /reboot

-> 60초후에 해당 아이피의 서버가 리부팅 됩니다.
 
--------------------------------------------------------------------------------------

WPF에서 Loaded event가 두번 호출되는 문제
Loaded event of a WPF user control fire two times
 http://stackoverflow.com/questions/3421303/loaded-event-of-a-wpf-user-control-fire-two-times
 
 if(this.IsLoaded) return
 
 
 --------------------------------------------------------------------------------------
LINQ
익명타입 알아오기.
 
returnValues = from result in valueCollection
					select new
					{
						LogDate = result.LogDate,
						SelectCount = result.MaxUserCountOfAll
					};
					
var result = GetDataSource(valueCollection, selectedValue);

foreach (object o in result)
{
    Console.WriteLine("LogDate=[{0}], SelectedCount=[{1}]", 
        o.GetType().GetProperty("LogDate").GetValue(o, null), 
        o.GetType().GetProperty("SelectCount").GetValue(o, null)
    );
}

---------------------------------------------------------------------------------------------
Timer vs. DispatcherTimer in WPF

Published on August 6th, 2008.

Have you ever wondered what is the difference between Timer and DispatcherTimer in WPF / Silverlight? 
In this post I will try to explain you the little difference. 
Timer generates recurring events in an application. 
DispatcherTimer is a timer that is integrated into the Dispatcher queue which is processed at a specified interval of time and at a specified priority. 
Timers are not guaranteed to execute exactly when the time interval occurs, but are guaranteed not to execute before the time interval occurs. 
This is because DispatcherTimer operations are placed on the Dispatcher queue like other operations. 
When the DispatcherTimer operation executes, it is dependent of the other jobs in the queue and their priorities.
 
If a Timer is used in a WPF application, it is worth noting that the Timer runs on a different thread then the user interface (UI) thread. 
In order to access objects on the user interface (UI) thread, it is necessary to post the operation onto the Dispatcher of the user interface (UI) thread using Invoke or BeginInvoke. 
Reasons for using a DispatcherTimer opposed to a Timer are that the DispatcherTimer runs on the same thread as the Dispatcher and a DispatcherPriority can be set.
 
So, the right way to do schedule operations in WPF / Silverlight application is the following:


DispatcherTimer timer = new DispatcherTimer();
timer.Interval = TimeSpan.FromSeconds(100);
timer.Tick += new EventHandler(timer_Tick);
timer.Start();


----------------------------------------------------------------------------------------------
Using AddOrUpdate method in ConcurrentDictionary in .NET 4.0

Dictionary<string, int> dictionary = GetDictionary(); 
 
if (dictionary.ContainsKey("MyKey")) 
{ 
    dictionary["MyKey"] += 5; 
} 
else 
{ 
    dictionary.Add("MyKey", 5); 
} 

 This is not thread-safe code. There are multiple race conditions: "MyKey" may be added/removed after the call to ContainsKey, and the value (if any) associated with "MyKey" may be changed between read and assignment in the line using the += operator.

The AddOrUpdate method is intended to resolve these threading issues by providing a mechanism to add or update the value associated with a given key, depending on whether the key is present. It is similar to TryGetValue in that it combines multiple operations (in this case, checking for a key, and either inserting or modifying a value depending on the presence of said key) into one effectively atomic action not susceptible to race conditions.

Just to make this concrete, here is how you would fix the above code using AddOrUpdate:
ConcurrentDictionary<string, int> dictionary = GetDictionary(); 
 
// Either insert the key "MyKey" with the value 5 or, 
// if "MyKey" is already present, increase its value by 5. 
dictionary.AddOrUpdate("MyKey", 5, (s, i) => i + 5); 



--------------------------------------------------------------------------------------------------
WPF 메모리 누수
http://blogs.msdn.com/b/jgoldb/archive/2008/02/04/finding-memory-leaks-in-wpf-based-applications.aspx
http://support.microsoft.com/kb/2297328
http://www.devx.com/dotnet/Article/33167/0/page/3


--------------------------------------------------------------------------------------------------
WPF Databinding
http://www.scottlogic.co.uk/blog/colin/2012/04/page/2/


--------------------------------------------------------------------------------------------------

특별한 경우에는 문제가 발생하지 않았던 WPF 응용 프로그램에서
 
아래 메시지의 에러가 발생했을 때에는
 
FileTracker : error FTK1011:
 
해당 WPF 경로에 '한글' 경로가 들어가 있는지 확인 후
 
영문 경로에 올려놓고 빌드하면 정상 빌드가 된다.

--------------------------------------------------------------------------------------------------

Visiblox Trial = RXBZD/0K0bTF5zaMjAxMjEwMTBpbmZvQHZpc2libG94LmNvbQ==/MLLoRPUgVOZyN+aQbkNXVjB7fHaAKLuhEwJW65oJgVVCug3WiNqGH3NLOsgg2w5P7eobYq6FtvJjGEvc+SpOsg+ef1suzbVm+QSkqGm3Y5ooCi0E2XuohhfqAEkP9y860/2ukR+FeVyRK82D1hggszeXZRg=BQxSUisl3BaWf/7myRmmlIjRnMU2cA7q+/03ZX9wdj30RzapYANf51ee3Pi8m2rVW6aD7t6Hi4Qy5vv9xpaQYXF5T7XzsafhzS3hbBokp36BoJZg8IrceBj742nQajYyV7trx5GIw9jy/V6r0bvctKYwTim7Kzq+YPWGMtqtQoU=PFJTQUtleVZhbHVlPjxNb2R1bHVzPnh6YlRrc2dYWWJvQUh5VGR6dkNzQXUrUVAxQnM5b2VrZUxxZVdacnRFbUx3OHZlWStBK3pteXg4NGpJbFkzT2hGdlNYbHZDSjlKVGZQTTF4S2ZweWZBVXBGeXgxRnVBMThOcDNETUxXR1JJbTJ6WXA3a1YyMEdYZGU3RnJyTHZjdGhIbW1BZ21PTTdwMFBsNWlSKzNVMDg5M1N4b2hCZlJ5RHdEeE9vdDNlMD08L01vZHVsdXM+PEV4cG9uZW50PkFRQUI8L0V4cG9uZW50PjwvUlNBS2V5VmFsdWU+

ChartFX 8.1 Trial = TRWPF81080407402322

----------------------------------------------------------------------------------------------
http://www.visiblox.com/blog/posts/2011/07/7/reducing-memory-usage-in-visiblox-charts/


-----------------------------------------------------------------------------------------------
ClickOnce 설치시 오류 해결
http://support.microsoft.com/kb/2697990/en-us?fr=1

Application cannot be started. Contact the application vendor. 
===> 아래와 같은 방법으로 하면됨.
1.Click Start, click Run, type cmd, and then click OK. 
2.Type the following command, and then press Enter:
rundll32 dfshim CleanOnlineAppCache


-----------------------------------------------------------------------------------------------
Few important tips
 
#1: Performance will improve if you update a DataSeries as below.
 
/*  Create new set of DataPoints */
DataPointCollection collection = new DataPointCollection();
for (int index = 0; index < MAX_NUMBER_OF_SERIES; index++)   
	collection.Add(new DataPoint() { YValue = value, AxisXLabel = "AxisXLabel”});
/* Directly set the new collection as DataPoints */
Chart.Series[0].DataPoints = collection; 
#2: When working with huge number of DataPoints, 
Performance will decrease if you perform the following operation directly in DataPoints list of a DataSeries. So always follow Tip #1.
 
Chart.Series[0].DataPoints.Add( new DataPoint() { YValue =value, AxisXLabel = "AxisXLabel”});
// Or Chart.Series[0].DataPoints.Remove(dataPoint); 
// OrChart.Series[0].DataPoints.Clear(); 
#3: Also note that setting LightWeight="true" in DataSeries will improve the Performance drastically.
 
#4: Disable shadow by setting ShadowEnabled in PlotArea, Chart, Legend and DataSeries/DataPoints etc.
 
You are updating the chart data in every 3 minutes. 
I think Chart is taking time to render as you are trying to update all the DataSeries at once. 
I suggest you to update each DataSeries one by one with interval of 1 to 2 seconds under a DispatcherTimer.
 
Please checkout the attached example application along with this post. 
Here I’m working with 20 DataSeries having 480 DataPoints in each.
On click of a button I’m refreshing the data present in ViewModel to update the chart.
 
void MyChart_Rendered(object sender, EventArgs e)
{  
	Axis axisY = (sender as Chart).AxesY[0];  
	MyChart.AxesY[0].AxisMaximum = (Double)axisY.ActualAxisMaximum + (axisY.ActualInterval);  
	MyChart.AxesY[0].AxisMinimum = (Double)axisY.ActualAxisMinimum - (axisY.ActualInterval);           
}

-----------------------------------------------------------------------------------------------------------
BEGIN CATCH
 
        PRINT 'An error occurred in stored procedure usp_error_log: ';
 
        -- Print error information. 

               PRINT 'Error ' + CONVERT(varchar(50), ERROR_NUMBER()) +
 
                         ', Severity ' + CONVERT(varchar(5), ERROR_SEVERITY()) +
 
                         ', State ' + CONVERT(varchar(5), ERROR_STATE()) + 

                         ', Procedure ' + ISNULL(ERROR_PROCEDURE(), '-') + 

                         ', Line ' + CONVERT(varchar(5), ERROR_LINE());
 
               PRINT ERROR_MESSAGE();
 
        RETURN -1;
 
    END CATCH
	
	
-------------------------------------------------------------------------------------------------------------
SP내의 특정 키워드 검색하기

DECLARE @SearchText VARCHAR(100)
SET @SearchText = '%TblItem%'


SELECT OBJECT_NAME(ID) FROM SYS.SYSCOMMENTS WHERE TEXT LIKE @SearchText GROUP BY OBJECT_NAME(ID) ORDER BY OBJECT_NAME(ID)



-------------------------------------------------------------------------------------------------------
ASP에서 효율적인 DB처리
------------------------------------------------------------------------------
1. cachesize를 지정한다.

 
ASP의 주요임무는 DB에서 쿼리셋을 가져와서 렌더링 하는 것이다. 
그 구조를 자세히 생각해보자(커서가 DB측에 있는 일반적인 경우)

 
   SQLserver(또는 기타DB) → IIS의 asp프로세스 → ADO.recordset 쿼리셋을 DB와 synk 
   → movenext때마다 DB서버와 연동 → 매결과를 asp프로세스 메모리에 적재 
   → 최종결과를 HTML로 렌더링해서 IIS에 전달 → 클라이언트에게 flush

 
대략 이렇다. 단절된 레코드셋을 사용하거나 getRows로 배열로 환원하지 않는다면

 
'movenext때마다 DB서버와 연동' 


이란 엄청난 일이 매 페이지마다 일어난다(커넥션은 풀링하지만)
그렇다고 맨날 배열로 참조하기도 싫고 단절된 레코드셋을 만들기도 싫다면 어떻게 해야할까?

 
'ADO.recordset 쿼리셋을 DB와 synk' 이 부분을 'ADO.recordset 쿼리셋 전체를 웹서버메모리에 적재'

 
이렇게 해주면 'movenext때마다 DB서버와 연동' 이란 작업은 'movenext때마다 메모리참조'로 바뀌게 되어 비
약적인 성능향상이 이루어진다. 하지만 얻는게 있으면 잃는게 있는법이다. 속도는 향상되나 그만큼의 캐쉬메
모리가 IIS서버에게 필요하다. 
따라서 아무 쿼리셋이나 전부 메모리에 적재하는 것은 어리석다. 그렇다고 특정 byte만큼 적재하다간 레코드
의 일부만 적재되고 짤리는 일이 있어서 말이 안된다.
가장 현명한 캐쉬방법은 '적당한 레코드를 캐쉬에 적재한다' 로 생각해볼 수 있다.
즉 100개의 레코드를 부른다면 앞에 30개정도는 캐쉬에서 처리하고 뒤에 70개만 디비와 synk하는 방법도 있다

 
ADO.recordset은 이러한 유연한 사고를 지원한다.

 
      recordset.casheSize=캐쉬할 레코드수

 
이러한 형식으로 사용할 수 있으며 기본값은 1이다.
즉 'select count(*) from board'와 같은 레코드가 1개만 반환되는 경우는 이미 캐쉬에 잡힌다는 뜻이다.
하지만 게시판에 흔히 쓰이는 'select top 10 * from board'와 같은 쿼리는 캐쉬를 따로 잡아줘야한다.
cacheSize를 사용할때 주의할 점은 반드시 레코드셋을 오픈하기 전에 설정해야만 의미가 있다는 것이다(당
연하게도!)

 
   strSQL="select top 30 * from board"
   rs.cacheSize=30
   rs.open strSQL,conn,0,1,1

 
이런 식으로 사용되어야한다. 쿼리결과가 정확하게 몇개의 레코드를 반환할지 모를 경우에도 유용하다.
대충 생각하기에 100개 안쪽이라면

 
   rs.cacheSize=100

 
이렇게 설정하면 100개만큼 메모리를 낭비하는가? 답은 아니다이다. 
생성된 레코드수만큼만 캐쉬하는 것이다. 
마지막으로 cacheSize를 사용할때 가장 유의할 점은 캐쉬될 용량이다.
레코드의 수라곤해도 그 레코드하나의 용량에 따라 캐쉬에 할당될 메모리의 양은 천차만별이다.

 
   select userid,count(*) from board group by userid

 
이런 쿼리는 사실 cacheSize=500을 해도 그닥 두려울게 없다. 캐쉬될 용량은 다음과 같이 계산해볼 수 있다.

 
   1record   용량 userid(12byte)+count(4byte)=16byte
   캐쉬전체 용량 16byte * 500 = 8000byte = 8kbyte

 
잘해봐야 8k가 두렵지는 않다. 하지만 아래 쿼리를 보자.

 
   select rowid,subject,contents,regdate,userid,hit from board

 
이것은 게시판을 읽어드릴때 일반적인 쿼리다. 100개만 캐쉬한다면 용량이 어떻게 될까.

 
   1record   용량 rowid(4)+subject(100)+contents(평균1000)+regdate(4)+userid(12byte)+hit(2) = 1122byte
   캐쉬전체 용량 1122byte * 100 = 112,200byte ≒ 112kbyte

 
이렇게 되면 얘기가 다르다. 10명의 동시접속자만 붙어도 1메가씩 떨어져나간다. 무서운 것이다.
따라서 캐쉬사이즈는 항상 그 용량을 고려해서 설정하는 습관을 들이도록 하자.
------------------------------------------------------------------------------
2. ADO페이징을 사용하지 않는다.

 
이 부분은 길게 설명하자면 한없이 길어지지만 간단히 설명하자면 
.PageSize, .AbsolutePage, .PageCount 시리즈를 사용하지 말라는 것이다.
그럼 어떻게? Mysql처럼 limit를 응용해서 두개의 top를 이용하는 것이다.
원리는 아래와 같다.
  1. 전체 레코드 수를 얻어온다. ex) RowCount=rs(0) - select count(*) from board
  2. 다음의 변수를 셋팅한다.
     PageSize - 한페이지 몇개의 로우가 보일지(직접할당 'PageSize=13')
     AbsolutePage - 현재 페이지(직접할당 'AbsolutePage=13')
     PageCount - 전체 페이지수(계산식 'PageCount = CInt((RowCount-1)/PageSize)+1' )
  3. 위의 변수를 이용해 쿼리를 구성한다.
     쿼리예) board테이블의 keyField가 rowid인 경우
     "select top " & PageSize & " * from board " &_
     "where rowid not in ( select top " & ((AbsolutePage-1)*PageSize) & " rowid from board)"
왜 이용하지 말라고 하는가하면 레코드셋의 페이징은 전체 레코드에 대해서 처리하기 때문에 용량이 큰 테이
블에서는 너무 큰 부하를 주기 때문에 인덱스를 이쁘게 잡은 테이블에서 위의 조건으로 indexSeek을 하는 것
과는 너무나 성능차이가 나기 때문이다.
------------------------------------------------------------------------------
3. ado객체의 옵션까지 상세히 설정한다.

 
레코드셋이나 커넥션객체를 다룰때 뒤에 인자를 세밀하게 조정하라는 얘기는 대부분의 책에 씌여져있으니 
자세히 다루지는 않겠다.
샘플로 쿼리로부터 레코드셋을 오픈하는 경우와 쿼리로 커넥션객체를 작업하는 샘플만 보자.

 
rs.open strSQL,conn,0,1,1
conn.execute strSQL,,1+&H80

 
(필자는 먼가 그 상수값을 외우는게 오히려 귀찮아서 걍 원래 변수값을 외워서 쓰고 있다..=.=;)
레코드셋 샘플은 전진전용커서,읽기전용락,커맨드는 일반 텍스트 라는 뜻의 옵션이다(순서대로)
execute 샘플은 커맨드는 일반 텍스트이고 + 레코드는 반환하지 말아라 라는 뜻의 옵션이다.
------------------------------------------------------------------------------
4. IsClientConnected를 사용한다.

 
Response.IsClientConnected 이란 메써드를 이용하면 asp를 호출한 클라이언트가 여전히 그 창을 닫지 않고 
서버의 응답을 기다리고 있는지 확인할 수 있다.
근데 대체 이걸 왜 사용할까? 간단히 예를 들면 복잡한 DB작업이나, 결제모듈등의 작업을 하는 경우 작업의 
요청자가 지루함을 이기지 못하고 페이지를 닫아버릴 때가 있다.
이런 경우 여러가지 문제가 야기되기 때문에 긴시간을 처리하는 asp는 마지막에 위 메써드를 이용해서 여전
히 클라이언트가 대기중인지 아닌지를 판별하여 대기중이라면 처리를 완료하고 아니면 롤백시키는 식으로 
구조를 짤 수 있다.(정말 시간이 긴 처리라면 중간중간에도 삽입해서 계속 확인해갈 수도 있고^^)
------------------------------------------------------------------------------
5. getRows와 getString을 활용한다.

 
특별하게 레코드셋으로 필터링하거나 검색할것이 아니라 단순히 루프를 돌릴것이라면 구지 무거운 레코드셋
으로 할 필요도 없고 자원도 빨리 반환할수록 좋다.
일반적으로 getRows를 사용하기 전의 루프문을 보면 다음과 같다.

 
rs.open strSQL,0,1,1
if not rs.EOF then
 do until rs.EOF
  response.write rs(0)&"-"&rs(1)
  rs.movenext
 loop
end if
rs.close
set rs=nothing

 
이것을 getRows로 바꾸면 아래와 같다.

 
rs.open strSQL,0,1,1
if not rs.EOF then arrTemp=rs.getrows
rs.close
set rs=nothing
if isArray(arrTemp) then
  for i=0 to Ubound(arrTemp,2)
    response.write arrTemp(0,i)&"-"&arrTemp(1,i)
  next
end if

 
레코드셋을 반환하는 시점도 훨씬 앞이고 게다가 일괄적으로 하나의 ASP블럭에서 여러가지 테이블 쿼리를 
처리하고 디자인 렌더링 부분에서는 배열루프로 처리할 수도 있다.
(물론 훨씬 빠르다)
getString도 많이 사용하는데 주로 단일 필드를 검색한 결과를 문자열로 만들때 편한다.
일반적인 사용방법은 아래와 같다.

 
SQLstring=rs.getString(2,,",","<BR>","null")

 
구문이 좀 복잡해보이는가? 2는 adClipString라는 상수대신에 사용한 값인데 거의 대부분의 경우에 저 값이 들
어가야하고, 그 다음 비워둔곳은 레코드 몇개만 치환할까인데 비워두면 다 받아준다. 
그 다음은 필드와 레코드의 구분자를 무엇으로할까이고 마지막은 널인 값은 무엇으로 치환하나에 대한 옵션
이다.
------------------------------------------------------------------------------
6. 연결문자열을 최적화한다.

 
이 글은 아래에도 있는 내용이라 생략하겠다.(MS SQL연결문자열에 Net-Library와 디비서버지정 참조)
------------------------------------------------------------------------------
7. 통계테이블 활용

 
디비를 설계할때는 항상 비용개념을 생각해봐야한다. 즉 insert나 update가 많은가 아니면 select가 많을 것인
가에 대한 숙제다.
일반적으로 게시판은 select가 압도적으로 많기 때문에 insert시에 비용을 더 책정해주면 select가 아름다워진
다. 즉 count(*), top, max 등을 사용할 부분을 간단히 트리거를 걸어두어 통계만 수집하는 테이블을 따로 작성
해두면 select시에는 단순하게 indexSeek으로 조회할 수 있기 때문에 훨씬 비용이 절감된다.
너무 뜬구름잡는 얘기같으니 트리거의 샘플을 하나보자.

 
CREATE TRIGGER insertBoard ON [dbo].[board] 
After INSERT,UPDATE
AS
declare @boardid int, @boardrowid int,@boardCNT int,@regdate datetime,@subject varchar(100),@cnt tinyint
   select @boardid=boardid from inserted
   select top 1 @boardrowid=rowid,@regdate=regdate,@subject=subject from board where boardid=@boardid 
and active=1
   select @boardCNT=count(*) from board where boardid=@boardid and active=1
   select @cnt=count(*) from boardstat where boardid=@boardid
   if @cnt>0
      update boardStat set boardrowid=@boardrowid,regdate=@regdate,subject=@subject,boardCNT=@boardCNT 
where boardid=@boardid
   else
      insert into boardStat(boardid,boardrowid,subject,regdate,boardCNT)values
(@boardid,@boardrowid,@subject,@regdate,@boardCNT)

 
위의 샘플은 BOARDID란 값으로 하나의 BOARD테이블에서 여러개의 게시판을 처리해주는 테이블을 가정하
고 짠 트리거인데, 간단히 설명하자면 insert가 되면 inserted에서 값을 확인해서 boardStat란 테이블에 해당레
코드가 있으면 최신값으로 업데이트를 아니면 insert를 하라는 것이다.
위의 트리거가 있으면

 
select count(*) from board where boardid=19 and active=1

 
이런 쿼리는

 
select cnt from boardStat where boardid=19

 
이렇게 바뀌게 된다.
boardid에 인덱스가 이쁘게 잡혀있다면 성능차이는 설명할 필요가 없을것이다.
------------------------------------------------------------------------------
8. 단절된 레코드셋을 사용한다.

 
웹서버가 여러대인 경우 단절된 레코드 셋을 사용하면 디비서버의 부하를 웹서버가 가져가기 때문에 상당한 
성능향상이 일어난다. (하지만 앞서 말했던 getRows보다는 아니다) 간단히 소스의 변화만 보겠다.

 
call DB_Open()
call RS_Open()
rs.open sql,conn,0,1,1

 
위의 일반적인 소스를 아래와 같이 바꾼다.

 
call DB_Open()
call RS_Open()
rs.CursorLocation = adUseClient
rs.Open sql,conn,0,1,1
rs.ActiveConnection = Nothing
------------------------------------------------------------------------------
9. 간이트랜젝션 사용하기

 
여러가지 상황에서 트랜젝션이 필요한 경우가 많다.
특히 insert나 update등은 한번에 여러개의 테이블에 안전하게 데이터가 안착해야하는 케이스가 많은데, 
이런 경우 트랜젝션을 일일히 선언하거나, SP를 짠다는 것은 여간 귀찮은게 아니다.
가장 간단한 형태의 트랜젝션은 바로 쿼리문자열에 세미콜론으로 구분하여 한꺼번에 execute시키는 것이다.
아래와같은 형태가 된다.

 
strSQL="insert into a (a)values('바보');insert into b (b)values('너도')"
adoCn.execute strSQL,,1+&H80

 
이러한 구문은 MSsql2000에서 지원되고 저 두개의 쿼리를 하나의 트랜젝션으로 취급해준다.
------------------------------------------------------------------------------
10. ADOR객체를 사용하기

 
ADODB 객체에는 오만가지 객체가 포함되어있다(Connect,Command,Recordset,Record,Stream)
단지 레코드셋이 필요한데 저런게 다 필요하단말인가(게다가 단일 연결을 한번만 하는 페이지의 경우는 디비
연결시 연결문자열로도 충분하다)
이런 경우 경량화객체인 ADOR객체를 사용하는 것이 좋다(대부분 언제나 좋다)

 
set rsOBJ = server.createobject("ADOR.Recordset")
dbconnSTR = "Provider=SQLOLEDB; Data Source=서버이름;..."
sqlSTR = "select * from test"
rsOBJ.open sqlSTR, dbconnSTR, 0, 1,1



------------------------------------------------------------------------------
interop 형식 ....를 포함할 수 없습니다. 적용 가능한 인터페이스를 대신 사용하십시오.

해결방법 ==> 참조에 DLL의 속성 Interop형식 포함이라고 있는데 이것을 False로 바꿔주면 된다.


---------------------------------------------------------------------------------------------


ASP.NET MVC로 DB 관련 개발할 때,
 
EntityFramework 나 LING to SQL을 사용하곤 한다
 
 
 
근데 이 두 넘은 다 좋은데, 저장 프로시저의 다중 결과 셋을 지원하지 않는다.
 
 
 
음.. 지원하지 않는다기 보다는 자동으로 생성되는 designer.cs에만 의존하면 그렇다고 해야 정확한 표현인 듯 싶다.
 
 
 
예를 들어, 

게시판 글 보기 페이지일 경우, 글 내용과 해당 글에 대한 댓글 정보를 하나의 프로시저에서 두 개의 결과 셋으로 반환하도록 할 경우 처음으로 반환된 결과 셋이 자동으로 바인딩 되는 것이다
 
 
 
물론 이런 상황이라면 글 내용은 OUTPUT 변수로 받고 댓글 리스트는 결과셋으로 받아서 해결 가능하다. 실제로 이렇게 사용한 적이 꽤 많다.
 
 
 
그러나 문제는 정말로 리스트형태의 결과 셋이 여러 개일 경우이다. 이젠 더 이상 OUTPUT 반환 값에 의존할 수 없게 되었다.
 
 
 
저장프로시저의 시나리오는 대략 이렇다.
 
1. OUTPUT 변수로 몇 가지 값을 반환한다
 
2. 3개의 결과 셋(레코드 셋이라는 표현을 좋아하는 사람이 있다)도 같이 반환한다
 
 
 
그러니깐, 의미적으로 총 3가지 형태의 결과값을 받고 싶은 게다
 
(OUTPUT 반환 값 + 결과셋1 + 결과셋2 + 결과셋3)
 
 
 
물론 결과셋의 개수는 중요치 않다. 두 개 이상의 결과셋을 반환한다는 게 중요하다
 
 
 
이제 이 프로시저를 LINK to SQL로 연동해서 결과를 처리하고 싶다
 
 
 
먼저 desiner.cs 가 자동 생성한 아래의 코드를 보자
 

 [global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.USP_GetGameView")]
  public ISingleResult<USP_GetGameViewResult> USP_GetGameView([global::System.Data.Linq.Mapping.ParameterAttribute(Name="GameNo", DbType="SmallInt")] System.Nullable<short> gameNo, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GameName", DbType="NVarChar(100)")] ref string gameName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Score", DbType="Decimal(2,1)")] ref System.Nullable<decimal> score, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="NVarChar(400)")] ref string description)
  {
   IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), gameNo, gameName, score, description);
   gameName = ((string)(result.GetParameterValue(1)));
   score = ((System.Nullable<decimal>)(result.GetParameterValue(2)));
   description = ((string)(result.GetParameterValue(3)));
   return ((ISingleResult<USP_GetGameViewResult>)(result.ReturnValue));
  }
 
 
 
매우 복잡한(?) 코드에 의미 두지 말자. designer.cs 가 자동 생성해 준 코드를 그대로 옮긴 것이니..
 
그리고 저장프로시저의 원형에 의미도 두지 말자. 그냥 대충 다중 셋을 반환하는 저장프로시저라고 생각하면 된다. 중요한 것은 ISingleResult를 반환한다는 점이다. 그래서 다중 결과 셋의 첫 번째 결과만 바인딩 되는 것이다.
 
 
 
그렇다면 해결책은 ISingleResult가 아닌 다중 셋을 반환할 수 있도록 IMultipleResults을 반환하면 된다.
 
이를 위한 새로운 메서드를 정의해야 하는 데, designer.cs가 자동 생성한 클래스를 사용할 생각은 말아야 한다. DB 연동이 추가/제거/변경 될 경우 이 클래스는 다시 생성되기 때문에 자신의 코드가 모두 사라질 수 있기 때문이다.
 
 
 
그렇기 때문에 파티셜 클래스 기법을 이용하면 된다.
 
 
 
designer.cs가 생성한 클래스와 동일한 이름으로 파티셜 클래스를 선언하고 다중 셋을 반환할 수 있도록 다음과 같이 작성할 수 있다
 
public partial class MobileDBDataContext
    {
        [Function(Name = "dbo.USP_GetGameView")]
        [ResultType(typeof(ScreenShot))]
        [ResultType(typeof(Video))]
        [ResultType(typeof(CommentInfo))]        
        public IMultipleResults GetGameView(short? gameNo, ref string gameName, ref decimal? score, ref string description)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), gameNo, gameName, score, description);
            gameName = ((string)(result.GetParameterValue(1)));
            score = ((System.Nullable<decimal>)(result.GetParameterValue(2)));
            description = ((string)(result.GetParameterValue(3))); 
            return (IMultipleResults) result.ReturnValue;
        }
    }
 
 
 
자동생성된 이전의 코드와 거의 유사한 것을 알 수 있다
 
다른 점이라면 IMultipleResults 타입을 반환한다는 점과, 다중 셋의 결과를 자동으로 바인딩 하기 위한 클래스 선언이 있다는 점이다.
 
 
 
LINQ to SQL을 사용하면서 다중 결과 셋에 대한 목마름이 있었던 사람은 위의 코드만으로도 그 즉시 적용가능하리라 본다.
 
 
 
---------------------------------------------------------------------------------------------

UninstallWMISchemaExecute (0x8004401e) when updating VisualSVN on Windows XP

http://rolf-engelhard.de/?p=203


SVN server 백업 복구 (Visual svn server)

 SVN 백업과 복구
 - 백업 
   > svnadmin dump D:\reposit\test > test.bak
 - 생성 
   > svnadmin create D:\reposit\test2
 - 복구 
   > svnadmin load D:\reposit\test2 < test.bak
 
* 특정 리비전 번호만 백업하고 싶다면
    > svnadmin dump D:\reposit\test -r 1:300 > test.bak


---------------------------------------------------------------------------------------------

Insert / Update는 정상적으로 실행되었는데 ExcuteNonQuery가 -1을 뱉는다... 원인은 무엇일까?


1. 롤백 되었거나
2. NOCOUNT 옵션이 ON 이거나.

http://blogs.msdn.com/b/spike/archive/2009/01/27/sqlcommand-executenonquery-returns-1-when-doing-insert-update-delete.aspx 


---------------------------------------------------------------------------------------------
 
 MVC4 작업을 한후 새프로젝트 구성후
 

BundleTable 사용시 
 
using System.Web.Optimization;
 
위 부분이 참조추가가 안될 경우가 있다.
 
이럴땐 패키지 관리자 콘솔을 이용해 다음 명령어를 입력해주면 된다.
 
    Install-Package Microsoft.AspNet.Web.Optimization -Pre
 
해당 프로젝트에 패키지가 추가되지 않아서 일어난 문제이다.
 
가끔 같은 솔루션안에 다른 프로젝트를 생성할때도 일어나니 잘기억했다가 이용해보자

-------------------------------------------------------------------------------------------------

Assembly generation failed -- Referenced assembly 'Test' does not have a strong name
Cause is An assembly is not signed with a strong name, the strong name could not be verified, or the strong name would not be valid without the current registry settings of the compute.

The strong name protects clients from unknowingly loading an assembly that has been tampered with. Assemblies without strong names should not be deployed outside of very limited scenarios.

An assembly without a strong name  cannot be loaded into the global assembly cache.

To Fix this, have to follow below steps.
Steps to create strong named assembly

Step 1 : Run visual studio command prompt and go to directory where your DLL located.

  For Example my DLL located in D:/hiren/Test.dll

Step 2 : Now create il file using below command.

  D:/hiren> ildasm /all /out=Test.il Test.dll 
  (this command generate code library)

Step 3 : Generate new Key for sign your project.

  D:/hiren> sn -k mykey.snk

Step 4 : Now sign your library using ilasm command.

  D:/hiren> ilasm /dll /key=mykey.snk Test.il

so after this step your assembly contains strong name and signed.

Jjust add reference this new assembly in your project and compile project its running now.
 

-----------------------------------------------------------------------------------------------------

	CryptObj.dll 는 2008R2에서 IIS의 Application Pool의 권한이 ApplicationPoolIdentity 이상이어야 한다.
	
	
	


* 속도 비교
속도는 String Builder가 제일 빠르고, 그 다음이 String Buffer가 빠르고, String이 제일 느리다.
 
 
* 메모리 비교
String을 예를 들면 다음과 같은 소스가 있다고 가정한다면
String str = "1"
             + ", 2"
             + ", 3";
 
메모리 1000번지에 1
메모리 2000번지에 1, 2
메모리 3000번지에 1, 2, 3이 저장되는 식이다.
따라서 메모리 소모도 클 뿐문 아니라, 속도에도 영향을 미치게 된다. (GC를 많이 하게 된다.)
 
 
String Buffer와 String Builder의 경우를 보면, 두 클래스는 같은 방식을 취한다.
String Buffer를 기준으로 예를 들면,

StringBuffer buffer = new StringBuffer();
buffer.append("1");
buffer.append(", 2");
buffer.append(", 3");
? 
?처음 1을 추가하면 
1000번지에 1? 
 
다음 2를 추가하면
1000번지에 1, 2
 
마지막 3을 추가하면
1000번지에 1, 2, 3이 된다.
따라서 String 보다는 메모리를 절약할 수 있게 된다.
속도면에서도 훨씬 더 낫다. (GC를 많이 안하기 때문에)
 
 
* String Buffer와 String Builder 차이점
String Buffer는 쓰레드에 안전하게 설계되어 있어서, 여러 개의 쓰레에서 하나의 StringBuffer클래스를 사용해도 문제되지 않는다.
String Builder는 단일 쓰레드에서의 안정성 만을 보장한다.
 
 
* 사용 시점
String은 짧은 문자열을 더할 경우 사용한다.
String Buffer는 스레드에 안전한 프로그램이 필요할 때나, 개발중인 시스템의 부분이 스레드에 안전한지 모를 경우에 사용한다.
String Builder는 스레드에 안전한지 여부가 전혀 관계 없는 프로그램을 개발할 때 사용한다.

	


80040154 오류로 인해 CLSID가 {428595D9-DEC0-4A5A-8D6B-83FB2F37FA16}인 구성 요소의 COM 클래스 팩터리를 검색하지 못했습니다
==> IIS 응용프로그램 Pool에서 아래와 같이 설정하면 해결완료
32비트 응용프로그램사용 : True로 변경


특정 DB의 컬럼명, 테이블 명 찾는 쿼리

 

-- 컬럼명 찾기

select * from information_schema.columns where column_name like '%컬럼명%'

 

use ezCommunity
select * from information_schema.columns where column_name like '%companyID%'


 

-- 테이블 찾기 

select * from information_schema.tables where table_name like '%table명%'

 

use ezApproval
select * from information_schema.tables where table_name like '%tbApr%'


-- sp 찾기

select name from sys.objects where name like '%sp명%'




SELECT a.NAME AS [Stored Procedure], 
       ''     AS [App Server], 
       ''     AS Description, 
       b.NAME AS PARAMETER, 
       ''     AS PARAMETER_NAME, 
       b.parameter_id, 
       c.NAME AS [TYPE], 
       b.max_length, 
       --c.COLLATION_NAME, 
       c.is_nullable, 
       CASE 
         WHEN b.is_output = 0 THEN 'INPUT' 
         ELSE 'OUTPUT' 
       END    AS PUT, 
       ''     AS [RETURN VALUE] 
FROM   sys.procedures a 
       INNER JOIN sys.parameters b 
               ON a.object_id = b.object_id 
       INNER JOIN sys.types c 
               ON b.system_type_id = c.system_type_id 
                  AND b.user_type_id = c.user_type_id 
--where a.name = 'usp_TournamentServerTournamentBase_Set' 
WHERE a.name like '%api_CasinoPaymentAndroid_Set%'
ORDER  BY a.NAME, 
          b.parameter_id ASC
		  
		  
		  

